#!/usr/bin/perl

# Bottarga is a rough, rude, shameless IRC bot, but it has some lacks too
# Copyright (C) 2016  Matteo Croce <matteo@openwrt.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

package Bottarga;

use warnings;
use strict;
use utf8;
use Switch;
use Config::IniFiles;
use base qw(Bot::BasicBot);
use Time::HiRes;
use LWP;
use JSON::XS;
#use Data::Dumper;

use constant INIFILE => '.bottargarc';
use constant SERVER => 'server';
use constant KARMA => 'karmas';
use constant IDLEYAWN => 3600;
#use constant OPPED => 'operaio';

my $nextreply;

-f INIFILE or die(INIFILE.' not found!');
my $conf = Config::IniFiles->new(-file => INIFILE, -allowempty => 1);
my $key = $conf->val('google', 'key');
my $cx = $conf->val('google', 'cx');
my $day = (localtime(time))[3];

my @pranzonauti = ();

my @pongs = (
	'ma dici a me? Ehi con chi stai parlando? Dici a me?',
	'c\'è qualcun altro qui? Stai parlando con me?',
	'non nominare il nome di Dio invano',
	'tutti con me c\'avete oggi??',
	'dimmi, stavo sognando tua cuggina',
	'devo dire a tutti quanto sei bravo col flauto salato?',
	'vai a giocare a mosca cieca sull\'autostrada, su',
	'toh un bug, indovina git blame chi sta indicando?',
	'ma non eri morto?',
	'vuoi lavorare sul conf_upgrade?',
	'sei mai stato a Rozzano?',
	'non mi piace che mi si facciano i fari',
	'ti cercavano quelli dell\'H&R',
	'magna, zitto, \'nte fa vedè',
	'riusciresti a farti revertare anche il revert di un bug',
	'sai che ho una malattia che mi fa venire un\'emiparesi del dito medio?',
	'ma che ooooh',
	'ma è possibile? portanna..',
	'non sono cattivo, è che mi programmano così',
	'Vedi, il mondo si divide in due categorie: chi ha la pistola carica, e chi chiude i bug. Tu chiudi i bug.',
	'Hai mai avuto una corda al collo? Ti assicuro che quando si mette a stringere senti gia il diavolo che ti morde le chiappe.',
	'sta mano po esse fero e po esse piuma: oggi è stata piuma',
	'D\'accordo, d\'accordo, d\'accordo! Insomma, che cosa cerchi di dimostrare?',
	'sono fesserie come questa che poi fanno finire la situazione in vacca, amico!',
	'passami il burro',
	'tu sei invidioso perché io sento le vocine e tu no',
	'certo certo.. adesso però prendi le tue pillole',
	'è giunta l\'ora di ripellare la poltrona del mega direttore galattico, ho messo il tuo nome nella lista dei papabili',
	'mi sa proprio che oggi è il tuo turno nell\'acquario del vice direttore laterale',
);

my @quits = (
	'non sentiremo la sua mancanza',
	'-1',
	'sono sempre i peggiori che se ne vanno',
	'chi è che continua ad andar avanti e indrio con chela porta lì?',
	'addio, adesso insegna agli angeli a scrivere bug',
	'ne rimarrà soltanto uno',
	'ci vediamo all\'inferno',
	'exit(1)',
);

my @autokarmas = (
	'ogni scarrafone è bello a mamma sua',
	'cos\'è, un tentativo di autoerotismo finito male?',
	'mi fa piacere sapere che c\'è qualcuno che ti apprezza: tu',
);

my @greets = (
	'ecco $nick, il cottolengo è al completo',
	'$nick: pranzonauti te salutant',
	'$nick: in questo canale non c\'è spazio per tutti e due',
	'$nick: buongiollo!',
	'sembrava una giornata di merda. e poi è arrivato $nick',
	'sento una variazione nella forza',
	'e benvenutii, a sti frocionii',
);

my @hellos = (
	'e mo so cazzi vostri',
	'buongiollo!',
	'ciao sfigati!',
	'qui dentro c\'è la più grande concentrazione di nerd/mq',
);

my @yawns = (
	'yawn',
	'ifup -a',
	'vi hanno rediretto in /dev/null?',
	'dove sono le mie pillole? aiuto, qui fa tanto freddo e ci sono i lupi',
	'growl',
	'ping -b 255.255.255.255',
);

my @kickwords = (
	[ 'windows', 'siamo programmatori, non bimbiminkia' ],
	[ 'vegan', 'gli amici degli animali sono miei nemici' ],
	[ 'cloud', 'si dice SERVER, o al limite clown' ],
	[ 'aranzulla', 'sappiamo già come cambiare la password di MSN, grazie' ],
	[ 'bieber', 'cos\'è, oggi ritirano la musica di merda?' ],
);

my %karmachuck = (
	'lat' => [
		'latus(-I)',
		'4294967295',
		'(numerus absque signum)-I',
		'~0',
		'0/0',
		'UINT_MAX'
	],
	'dec' => [
		'sqrt(-1)',
		'4294967295',
		'(unsigned int)-1',
		'~0',
		'0/0',
		'UINT_MAX'
	],
);

my @offese = (
	'sei talmente brutto che sembri un quadro d\'arte moderna, te ne rendi conto?',
	'i tuoi genitori hanno anche figli normali?',
	'la parte migliore dello schizzo da cui sei nato è colata tra le chiappe di tua madre ed ha macchiato il materasso!',
	'Quanto sei alto? Prima non facevano pile di merda così alte!',
	'Io scommetto che tu sei uno di quegli ingrati che lo mette in culo a qualche poveraccio senza usargli la cortesia di menarglielo davanti per sdebitarsi! Ti terrò d\'occhio!',
	'Se possono trarre la penicillina da del pane ammuffito, sicuramente potranno tirare fuori qualcosa da te.',
	'sei utile come un paio di mutande in un porno',
	'sei simpatico come un grappolo di emorroidi',
	'sei utile come la R di Marlboro',
	'sei utile come una forchetta col brodo',
	'non sapresti fare nemmeno un cerchio con un bicchiere',
	'la tua intelligenza è paragonabile a quella di una farfalla che si bruca le ali appena uscita dal bozzolo',
	'sei simpatico come un crash del browser a metà pugnetta',
	'no, non ti offendo. la natura è già stata cattiva con te',
	'sei così sfigato che metti il dito nel pagliaio ti pungi con l\'ago',
	'stanotte ti ho sognato mentre ti salutavo dall’alto: eri bello, abbronzato e immerso nell\'acqua, poi ho tirato lo scarico e sei sparito',
	'mi presti la tua faccia che devo fare una figura di merda?',
	'il tuo contributo all\'umanità è pari a quello dello zero nella somma',
	'il tuo contributo all\'umanità è pari a quello dell\'uno nella moltiplicazione',
	'hai la testa per tenere separare le orecchie',
	'se la merda portasse intelligenza tu saresti nato senza culo',
	'quando Dio distribuiva l\'intelligenza tu scappasti gridando al complotto',
	'sei odioso come quei .tar che li estrai e ti cacano migliaia di files nella home',
	
);

my @replies = (
	[ 'dvt', 'https://en.wikipedia.org/wiki/DVT' ],
	[ 'balchin', 'bashism' ],
	[ 'yaps', 'Yet Another Piece of Shit?' ],
	[ 'adb', 'http://adbgenova.it/' ],
	[ 'swisscom', 'Shitcom' ],
	[ 'hostapd', 'OSTIAPD!' ],
	[ 'host', 'host della mal\'ora!' ],
	[ 'broadcom', 'Prodcom' ],
	[ 'conf', 'conf_upgrade??' ],
	[ 'upgrade', 'conf_upgrade??' ],
	[ 'porco', 'il famoso porco di tre lettere' ],
	[ 'dio', 'http://40.media.tumblr.com/78149a40447fedbfcd02f035a9538ec5/tumblr_o1bc3aYwTA1rn12nzo1_1280.jpg' ],
	[ 'blinda', 'antani, blinda la supercazzola brematurata con doppio scappellamento a destra?' ],
	[ 'scappellamento', 'tarapia tapioco come se fosse antani con la supercazzola brematurata, con lo scappellamento a destra' ],
	[ 'brematurata', 'tarapia tapioco! brematurata la supercazzola o scherziamo?' ],
	[ 'brematura', 'ma no, aspetti, mi porga l\'indice, ecco lo alzi così, guardi, guardi, guardi, lo vede il dito, lo vede che stuzzica, e brematura anche?' ],
	[ 'supercazzola', 'senza contare che la supercazzola prematurata ha perso i contatti col tarapia tapioco' ],
	[ 'antani', 'scusi, noi siamo in quattro, come se fosse antani anche per lei soltanto in due oppure in quattro anche scribai con cofandina' ],
	[ 'comunista', 'io mica so\' comunista così, so\' comunista così!!!' ],
	[ 'comunisti', 'io mica so\' comunista così, so\' comunista così!!!' ],
	[ 'comunismo', 'io mica so\' comunista così, so\' comunista così!!!' ],
	[ 'stalin', 'io mica so\' comunista così, so\' comunista così!!!' ],
	[ 'java', 'quando un programmatore Java incontra un programmatore C, il programmatore java è un programmatore morto' ],
	[ 'cosa', 'Dì "cosa" un\'altra volta, dì "cosa" un\'altra volta! Ti sfido, due volte, ti sfido, figlio di puttana: dì "cosa" un\'altra maledettissima volta!' ],
	[ 'spasso', 'mi spasso nel vedere le persone a spasso' ],
	[ 'capra', 'Capra! 'x10 ],
	[ 'bull', 'have you ever fucked by an Italian bull?' ],
	[ 'malato', 'te prego aiutame, io soy malata' ],
	[ 'malata', 'te prego aiutame, io soy malata' ],
	[ 'bagno', 'dopo la seconda sgrullata è masturbazione' ],
	[ 'cesso', 'dopo la seconda sgrullata è masturbazione' ],
	[ 'bmw', 'avvento' ],
	[ 'audi', 'avvento' ],
	[ 'linus', 'sempre sia lodato' ],
	[ 'torvalds', 'sempre sia lodato' ],
	[ 'ma allora', 'MA ALLORA.. LUI È DRACULA!!' ],
	[ 'peccato', 'polpette di Bavaria, quattro tipi di carne, prosciutto formaggio.. peccato tu non puole manciare' ],
	[ 'compilare', 'la supercazzola precompilata' ],
	[ 'compilata', 'la supercazzola precompilata' ],
	[ 'compilato', 'la supercazzola precompilata' ],
	[ 'compilo', 'la supercazzola precompilata' ],
	[ 'no no', 'no no no no, devi sucare' ],
);

my @modes = (
	[ 'sborropippo', 'le seghe' ],
	[ 'timothy', 'è scritto sul wiki' ],
	[ 'hartman', 'le domande qui le faccio io' ],
	[ 'bazzeato', 'eh..' ],
	[ 'scordo', 'hai provato con una Broadcom originale?' ],
	[ 'marò', 'si ma i marò?' ],
);

my @numbers = ( 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 );
my @letters = ( 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I' );

sub roman {
	my $num = shift;
	my $rnum;

	if(!$num) {
		return '(nihil)';
	}

	if($num < 0) {
		$rnum = '-';
		$num = -$num;
	}

	if($num > 499999999) {
		return '(nihil)';
	}

	if($num > 99999) {
		$rnum .= '|';
		$rnum .= roman($num / 100000);
		$rnum .= '|';
		$num %= 100000;
	}

	if($num > 4999) {
		$rnum .= '_';
		$rnum .= roman($num / 1000);
		$rnum .= '_';
		$num %= 1000;
	}

	for (my $i = 0; $i < @numbers; $i++) {
		while ($num >= $numbers[$i]) {
			$rnum .= $letters[$i];
			$num -= $numbers[$i];
		}
	}

	return $rnum;
}

sub getKarma {
	my $nick = shift;
	$conf = Config::IniFiles->new(-file => INIFILE, -allowempty => 1);
	$conf->AddSection(KARMA);
	my $karma = $conf->val(KARMA, $nick);
	$karma = 0 if (!defined $karma);
	return $karma;
}

sub incKarma {
	my $nick = shift;
	$conf = Config::IniFiles->new(-file => INIFILE, -allowempty => 1);
	$conf->SectionExists(KARMA) or $conf->AddSection(KARMA);
	my $karma = $conf->val(KARMA, $nick, 0);
	$conf->newval(KARMA, $nick, $karma + 1);
	$conf->RewriteConfig();
}

sub type {
	Time::HiRes::usleep(rand(500000) + 300000);
	my ($self, @message) = @_;
	$self->say(@message);
	$self->schedule_tick(IDLEYAWN);
}

sub userquit {
	my ($self, $message) = @_;
	foreach my $chan (keys $self->{IRCOBJ}->{STATE}->{Chans}) {
		$self->type(channel => $chan, body => $quits[rand @quits]);
	}
}

sub chanpart {
	my ($self, $message) = @_;
	$self->type(channel => $message->{channel}, body => $quits[rand @quits]);
}

sub findreply {
	my $msg = shift;
	foreach my $k (@replies) {
		if ($msg =~ /\b$k->[0]\b/i) {
			return $k->[1];
		}
	}
}

sub said {
	my ($self, $message) = @_;
	if($message->{channel} eq 'msg') {
		if ($message->{body} =~ /^say (.+)/) {
			foreach my $chan (keys $self->{IRCOBJ}->{STATE}->{Chans}) {
				$self->type(channel => $chan, body => $1);
			}
		} else {
			foreach my $k (@modes) {
				if ($message->{body} =~ /$k->[0]/i) {
					$nextreply = $k->[1];
					last;
				}
			}
			return undef;
		}
		return undef;
	}
	foreach my $k (@kickwords) {
		if ($message->{body} =~ /$k->[0]/i) {
			$self->{IRCOBJ}->yield(kick => $message->{channel} => $message->{who} => $k->[1]);
			return undef;
		}
	}
	# messages to me
	if (defined $message->{address} && $message->{address} eq $self->{nick}) {
		if ($message->{body} =~ /^(offendi|insulta) (.*)$/) {
			if($2 eq $self->{nick}) {
				$self->type(channel => $message->{channel}, body => 'dottore, chiami un dottore!');
			} elsif($2 eq 'tutti') {
				foreach my $n (keys $self->{IRCOBJ}->{STATE}->{Chans}->{uc($message->{channel})}->{Nicks}) {
					if ($n ne $self->{nick}) {
						$self->type(channel => $message->{channel}, who => lc($n), address => lc($n), body => $offese[rand @offese]);
					}
				}
			} elsif($2 eq 'qualcuno') {
				my @nicks = keys $self->{IRCOBJ}->{STATE}->{Chans}->{uc($message->{channel})}->{Nicks};
				if(grep(/$self->{nick}/i, @nicks)) {
					my $i = 0;
					$i++ until $nicks[$i] eq uc($self->{nick});
					splice(@nicks, $i, 1);
				}
				my $n = $nicks[rand @nicks];
				$self->type(channel => $message->{channel}, who => lc($n), address => lc($n), body => $offese[rand @offese]);
			} elsif (defined $self->{IRCOBJ}->{STATE}->{Chans}->{uc($message->{channel})}->{Nicks}->{uc($2)}) {
				$self->type(channel => $message->{channel}, who => $2, address => $2, body => $offese[rand @offese]);
			} else {
				$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => 'non si parla male degli assenti, escluse le ex');
			}
		} elsif ($message->{body} eq 'pranzo' || $message->{body} eq 'mangio') {
			if(!grep(/$message->{who}/, @pranzonauti)) {
				push @pranzonauti, $message->{who};
			}
			$self->type(channel => $message->{channel}, body => 'ok');
		} elsif ($message->{body} eq 'salto') {
			if(grep(/$message->{who}/, @pranzonauti)) {
				my $i = 0;
				$i++ until $pranzonauti[$i] eq $message->{who};
				splice(@pranzonauti, $i, 1);
			}
			$self->type(channel => $message->{channel}, body => 'finocchio');
		} elsif ($message->{body} eq 'chi mangia?' || $message->{body} eq 'chi pranza?') {
			if(@pranzonauti) {
				$self->type(channel => $message->{channel}, body => join(', ', @pranzonauti));
				$self->type(channel => $message->{channel}, body => "per un totale di ".@pranzonauti." pranzonauti");
			} else {
				$self->type(channel => $message->{channel}, body => 'niente manciare, niente pere, per i prossimi 20 ciorni');
			}
		} elsif ($message->{body} =~ /^(.*)\?$/) {
			if($nextreply) {
				$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => $nextreply);
				$nextreply = '';
			} else {
				my $ua = LWP::UserAgent->new;
				$ua->agent('Bottarga');
				my $req = HTTP::Request->new(GET => "https://www.googleapis.com/customsearch/v1?key=$key&cx=$cx&hl=it&num=1&q=$1");
				my $res = $ua->request($req);
				if ($res->is_success) {
					my $json = decode_json($res->content);
					if (defined $json->{items}[0]->{link}) {
						$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => $json->{items}[0]->{link});
					} else {
						$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => 'boh');
					}
				}
			}
		} else {
			$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => $pongs[rand @pongs]);
		}
	} elsif ($message->{body} =~ /^karma (.+)/) {
		$self->type(channel => $message->{channel}, body => "$1 ha karma ".roman(getKarma(lc($1))));
	} elsif ($message->{body} =~ /(.+)\+\+$/) {
		if (defined $self->{IRCOBJ}->{STATE}->{Chans}->{uc($message->{channel})}->{Nicks}->{uc($1)}) {
			if ($1 eq $message->{who}) {
				my $msg = $autokarmas[rand @autokarmas];
				$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => $msg);
			} else {
				incKarma(lc($1));
			}
		} else {
			$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => "non vedo $1 nella lista degli invitati");
		}
	} elsif (findreply($message->{body})) {
		$self->type(channel => $message->{channel}, body => findreply($message->{body}));
	} elsif ($message->{body} =~ /\b[wl]an\b/i) {
		my @reti = ('LAN', 'WAN');
		$self->type(channel => $message->{channel}, body => 'da '.$reti[rand @reti].' a '.$reti[rand @reti]);
	} elsif (defined $message->{body} && $message->{body} =~ /\b$self->{nick}\b/i) {
		$self->type(channel => $message->{channel}, who => $message->{who}, address => $message->{who}, body => $pongs[rand @pongs]);
	} elsif ($message->{body} =~ /^!karmas\s*(.*)/) {
		$self->type(channel => $message->{channel}, body => 'Karma list:');
		my $base = $1;
		$conf = Config::IniFiles->new(-file => INIFILE, -allowempty => 1);
		foreach my $k ($conf->Parameters(KARMA)) {
			my $karma = $conf->val(KARMA, $k);
			switch($base) {
				case 'lat' {
					$karma = roman($karma);
					last;
				}
				case 'hex' {
					$karma = sprintf("%x", $karma);
					last;
				}
				case 'bin' {
					$karma = sprintf("%b", $karma);
					last;
				}
			}
			$self->type(channel => $message->{channel}, body => "$k:$karma");
		}
		$base = 'dec' if($base ne 'lat');
		my @kc = @{$karmachuck{$base}};
		$self->type(channel => $message->{channel}, body => 'ChuckNorris:'.$kc[rand @kc]);
	}
	$self->schedule_tick(IDLEYAWN);
	return undef;
}

sub chanjoin {
	my ($self, $message) = @_;
#	if ($message->{who} eq OPPED) {
#		$self->{IRCOBJ}->yield(mode => $message->{channel} => '+o' => $message->{who});
#	}
	if ($message->{who} eq $self->{nick}) {
		my $hello = $hellos[rand @hellos];
		$self->type(channel => $message->{channel}, body => $hello);
	} else {
		my $greet = $greets[rand @greets];
		$greet =~ s/\$nick/$message->{who}/g;
		$self->type(channel => $message->{channel}, body => $greet);
	}
	return undef;
}

sub tick {
	my ($self, $message) = @_;
	my $newday = (localtime(time))[3];
	if($newday != $day) {
		$day = $newday;
		@pranzonauti = ();
	}
	foreach my $chan (keys %{$self->{IRCOBJ}->{STATE}->{Chans}}) {
		$self->type(channel => $chan, body => $yawns[rand @yawns]);
	}
}

Bottarga->new(
	server		=> $conf->val(SERVER, 'hostname'),
	port		=> $conf->val(SERVER, 'port'),
	username	=> $conf->val(SERVER, 'username'),
	password	=> $conf->val(SERVER, 'password'),
	nick		=> $conf->val(SERVER, 'nick'),
	name		=> $conf->val(SERVER, 'name'),
	channels	=> [$conf->val(SERVER, 'channel')],
)->run();
